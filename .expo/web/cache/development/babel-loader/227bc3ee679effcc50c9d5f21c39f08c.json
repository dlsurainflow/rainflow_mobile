{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Github\\\\rainflow_mobile\\\\node_modules\\\\react-native-indicator\\\\lib\\\\loader\\\\BreathingLoader.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { Surface } from '@react-native-community/art';\nimport AnimatedCircle from \"../animated/AnimatedCircle\";\nimport { color } from \"../const\";\n\nvar BreathingLoader = function (_React$PureComponent) {\n  _inherits(BreathingLoader, _React$PureComponent);\n\n  var _super = _createSuper(BreathingLoader);\n\n  function BreathingLoader(props) {\n    var _this;\n\n    _classCallCheck(this, BreathingLoader);\n\n    _this = _super.call(this, props);\n\n    _this._animation = function () {\n      Animated.sequence([Animated.timing(_this.state.scale, {\n        toValue: 1,\n        duration: _this.props.frequency,\n        useNativeDriver: false\n      }), Animated.timing(_this.state.scale, {\n        toValue: 0.1,\n        duration: _this.props.frequency,\n        useNativeDriver: false\n      })]).start(function () {\n        !_this.unmounted && _this._animation();\n      });\n    };\n\n    _this.state = {\n      scale: new Animated.Value(0.1)\n    };\n    return _this;\n  }\n\n  _createClass(BreathingLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._animation();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unmounted = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          size = _this$props.size,\n          strokeWidth = _this$props.strokeWidth;\n      return React.createElement(Surface, {\n        width: size + strokeWidth,\n        height: size + strokeWidth,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, React.createElement(AnimatedCircle, {\n        radius: size,\n        stroke: color,\n        strokeWidth: strokeWidth,\n        scale: this.state.scale,\n        x: (size + strokeWidth) / 2,\n        y: (size + strokeWidth) / 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return BreathingLoader;\n}(React.PureComponent);\n\nBreathingLoader.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  frequency: PropTypes.number\n};\nBreathingLoader.defaultProps = {\n  color: color,\n  size: 30,\n  strokeWidth: 3,\n  frequency: 800\n};\nexport { BreathingLoader as default };","map":{"version":3,"sources":["D:/Github/rainflow_mobile/node_modules/react-native-indicator/lib/loader/BreathingLoader.js"],"names":["React","PropTypes","Surface","AnimatedCircle","color","BreathingLoader","props","_animation","Animated","sequence","timing","state","scale","toValue","duration","frequency","useNativeDriver","start","unmounted","Value","size","strokeWidth","PureComponent","propTypes","string","number","defaultProps"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,OAAT,QAAwB,6BAAxB;AACA,OAAOC,cAAP;AACA,SAASC,KAAT;;IAEqBC,e;;;;;AAenB,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAenBC,UAfmB,GAeN,YAAM;AACjBC,MAAAA,QAAQ,CAACC,QAAT,CAAkB,CAChBD,QAAQ,CAACE,MAAT,CAAgB,MAAKC,KAAL,CAAWC,KAA3B,EAAkC;AAChCC,QAAAA,OAAO,EAAE,CADuB;AAEhCC,QAAAA,QAAQ,EAAE,MAAKR,KAAL,CAAWS,SAFW;AAGhCC,QAAAA,eAAe,EAAE;AAHe,OAAlC,CADgB,EAMhBR,QAAQ,CAACE,MAAT,CAAgB,MAAKC,KAAL,CAAWC,KAA3B,EAAkC;AAChCC,QAAAA,OAAO,EAAE,GADuB;AAEhCC,QAAAA,QAAQ,EAAE,MAAKR,KAAL,CAAWS,SAFW;AAGhCC,QAAAA,eAAe,EAAE;AAHe,OAAlC,CANgB,CAAlB,EAWGC,KAXH,CAWS,YAAM;AACb,SAAC,MAAKC,SAAN,IAAmB,MAAKX,UAAL,EAAnB;AACD,OAbD;AAcD,KA9BkB;;AAEjB,UAAKI,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IAAIJ,QAAQ,CAACW,KAAb,CAAmB,GAAnB;AADI,KAAb;AAFiB;AAKlB;;;;wCAEmB;AAClB,WAAKZ,UAAL;AACD;;;2CAEsB;AACrB,WAAKW,SAAL,GAAiB,IAAjB;AACD;;;6BAmBQ;AAAA,wBAC8B,KAAKZ,KADnC;AAAA,UACCF,KADD,eACCA,KADD;AAAA,UACQgB,IADR,eACQA,IADR;AAAA,UACcC,WADd,eACcA,WADd;AAEP,aACE,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAED,IAAI,GAAGC,WAAvB;AAAoC,QAAA,MAAM,EAAED,IAAI,GAAGC,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AACE,QAAA,MAAM,EAAED,IADV;AAEE,QAAA,MAAM,EAAEhB,KAFV;AAGE,QAAA,WAAW,EAAEiB,WAHf;AAIE,QAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC,KAJpB;AAKE,QAAA,CAAC,EAAE,CAACQ,IAAI,GAAGC,WAAR,IAAuB,CAL5B;AAME,QAAA,CAAC,EAAE,CAACD,IAAI,GAAGC,WAAR,IAAuB,CAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAYD;;;;EA7D0CrB,KAAK,CAACsB,a;;AAA9BjB,e,CACZkB,S,GAAY;AACjBnB,EAAAA,KAAK,EAAEH,SAAS,CAACuB,MADA;AAEjBJ,EAAAA,IAAI,EAAEnB,SAAS,CAACwB,MAFC;AAGjBJ,EAAAA,WAAW,EAAEpB,SAAS,CAACwB,MAHN;AAIjBV,EAAAA,SAAS,EAAEd,SAAS,CAACwB;AAJJ,C;AADApB,e,CAQZqB,Y,GAAe;AACpBtB,EAAAA,KAAK,EAALA,KADoB;AAEpBgB,EAAAA,IAAI,EAAE,EAFc;AAGpBC,EAAAA,WAAW,EAAE,CAHO;AAIpBN,EAAAA,SAAS,EAAE;AAJS,C;SARHV,e","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated } from 'react-native';\nimport { Surface } from '@react-native-community/art';\nimport AnimatedCircle from '../animated/AnimatedCircle';\nimport { color } from '../const';\n\nexport default class BreathingLoader extends React.PureComponent {\n  static propTypes = {\n    color: PropTypes.string,\n    size: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    frequency: PropTypes.number,\n  };\n\n  static defaultProps = {\n    color,\n    size: 30,\n    strokeWidth: 3,\n    frequency: 800,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      scale: new Animated.Value(0.1),\n    };\n  }\n\n  componentDidMount() {\n    this._animation();\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  _animation = () => {\n    Animated.sequence([\n      Animated.timing(this.state.scale, {\n        toValue: 1,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.scale, {\n        toValue: 0.1,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n    ]).start(() => {\n      !this.unmounted && this._animation();\n    });\n  };\n\n  render() {\n    const { color, size, strokeWidth } = this.props;\n    return (\n      <Surface width={size + strokeWidth} height={size + strokeWidth}>\n        <AnimatedCircle\n          radius={size}\n          stroke={color}\n          strokeWidth={strokeWidth}\n          scale={this.state.scale}\n          x={(size + strokeWidth) / 2}\n          y={(size + strokeWidth) / 2}\n        />\n      </Surface>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}