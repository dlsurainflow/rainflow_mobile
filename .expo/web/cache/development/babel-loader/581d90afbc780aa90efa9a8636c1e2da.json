{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Github\\\\rainflow_mobile\\\\node_modules\\\\react-native-indicator\\\\lib\\\\loader\\\\PulseLoader.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { Surface } from '@react-native-community/art';\nimport AnimatedCircle from \"../animated/AnimatedCircle\";\nimport { color } from \"../const\";\n\nvar PulseLoader = function (_React$PureComponent) {\n  _inherits(PulseLoader, _React$PureComponent);\n\n  var _super = _createSuper(PulseLoader);\n\n  function PulseLoader() {\n    var _this;\n\n    _classCallCheck(this, PulseLoader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      effect: new Animated.ValueXY({\n        x: 0,\n        y: 1\n      })\n    };\n\n    _this._animation = function () {\n      Animated.parallel([Animated.timing(_this.state.effect.x, {\n        toValue: 1,\n        duration: _this.props.frequency,\n        useNativeDriver: false\n      }), Animated.timing(_this.state.effect.y, {\n        toValue: 0.05,\n        duration: _this.props.frequency,\n        useNativeDriver: false\n      })]).start(function () {\n        if (!_this.unmounted) {\n          _this.state.effect.setValue({\n            x: 0,\n            y: 1\n          });\n\n          _this._animation();\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PulseLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._animation();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unmounted = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          size = _this$props.size;\n      return React.createElement(Surface, {\n        width: size,\n        height: size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }\n      }, React.createElement(AnimatedCircle, {\n        radius: size,\n        fill: color,\n        scale: this.state.effect.x,\n        opacity: this.state.effect.y,\n        x: size / 2,\n        y: size / 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return PulseLoader;\n}(React.PureComponent);\n\nPulseLoader.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.number,\n  frequency: PropTypes.number\n};\nPulseLoader.defaultProps = {\n  color: color,\n  size: 30,\n  frequency: 1000\n};\nexport { PulseLoader as default };","map":{"version":3,"sources":["D:/Github/rainflow_mobile/node_modules/react-native-indicator/lib/loader/PulseLoader.js"],"names":["React","PropTypes","Surface","AnimatedCircle","color","PulseLoader","state","effect","Animated","ValueXY","x","y","_animation","parallel","timing","toValue","duration","props","frequency","useNativeDriver","start","unmounted","setValue","size","PureComponent","propTypes","string","number","defaultProps"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,OAAT,QAAwB,6BAAxB;AACA,OAAOC,cAAP;AACA,SAASC,KAAT;;IAEqBC,W;;;;;;;;;;;;;;;UAanBC,K,GAAQ;AACNC,MAAAA,MAAM,EAAE,IAAIC,QAAQ,CAACC,OAAb,CAAqB;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAArB;AADF,K;;UAYRC,U,GAAa,YAAM;AACjBJ,MAAAA,QAAQ,CAACK,QAAT,CAAkB,CAChBL,QAAQ,CAACM,MAAT,CAAgB,MAAKR,KAAL,CAAWC,MAAX,CAAkBG,CAAlC,EAAqC;AACnCK,QAAAA,OAAO,EAAE,CAD0B;AAEnCC,QAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWC,SAFc;AAGnCC,QAAAA,eAAe,EAAE;AAHkB,OAArC,CADgB,EAMhBX,QAAQ,CAACM,MAAT,CAAgB,MAAKR,KAAL,CAAWC,MAAX,CAAkBI,CAAlC,EAAqC;AACnCI,QAAAA,OAAO,EAAE,IAD0B;AAEnCC,QAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWC,SAFc;AAGnCC,QAAAA,eAAe,EAAE;AAHkB,OAArC,CANgB,CAAlB,EAWGC,KAXH,CAWS,YAAM;AACb,YAAI,CAAC,MAAKC,SAAV,EAAqB;AACnB,gBAAKf,KAAL,CAAWC,MAAX,CAAkBe,QAAlB,CAA2B;AAAEZ,YAAAA,CAAC,EAAE,CAAL;AAAQC,YAAAA,CAAC,EAAE;AAAX,WAA3B;;AACA,gBAAKC,UAAL;AACD;AACF,OAhBD;AAiBD,K;;;;;;;wCA1BmB;AAClB,WAAKA,UAAL;AACD;;;2CAEsB;AACrB,WAAKS,SAAL,GAAiB,IAAjB;AACD;;;6BAsBQ;AAAA,wBACiB,KAAKJ,KADtB;AAAA,UACCb,KADD,eACCA,KADD;AAAA,UACQmB,IADR,eACQA,IADR;AAEP,aACE,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAEA,IAAhB;AAAsB,QAAA,MAAM,EAAEA,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AACE,QAAA,MAAM,EAAEA,IADV;AAEE,QAAA,IAAI,EAAEnB,KAFR;AAGE,QAAA,KAAK,EAAE,KAAKE,KAAL,CAAWC,MAAX,CAAkBG,CAH3B;AAIE,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWC,MAAX,CAAkBI,CAJ7B;AAKE,QAAA,CAAC,EAAEY,IAAI,GAAG,CALZ;AAME,QAAA,CAAC,EAAEA,IAAI,GAAG,CANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAYD;;;;EA3DsCvB,KAAK,CAACwB,a;;AAA1BnB,W,CACZoB,S,GAAY;AACjBrB,EAAAA,KAAK,EAAEH,SAAS,CAACyB,MADA;AAEjBH,EAAAA,IAAI,EAAEtB,SAAS,CAAC0B,MAFC;AAGjBT,EAAAA,SAAS,EAAEjB,SAAS,CAAC0B;AAHJ,C;AADAtB,W,CAOZuB,Y,GAAe;AACpBxB,EAAAA,KAAK,EAALA,KADoB;AAEpBmB,EAAAA,IAAI,EAAE,EAFc;AAGpBL,EAAAA,SAAS,EAAE;AAHS,C;SAPHb,W","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated } from 'react-native';\nimport { Surface } from '@react-native-community/art';\nimport AnimatedCircle from '../animated/AnimatedCircle';\nimport { color } from '../const';\n\nexport default class PulseLoader extends React.PureComponent {\n  static propTypes = {\n    color: PropTypes.string,\n    size: PropTypes.number,\n    frequency: PropTypes.number,\n  };\n\n  static defaultProps = {\n    color,\n    size: 30,\n    frequency: 1000,\n  };\n\n  state = {\n    effect: new Animated.ValueXY({ x: 0, y: 1 }),\n  };\n\n  componentDidMount() {\n    this._animation();\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  _animation = () => {\n    Animated.parallel([\n      Animated.timing(this.state.effect.x, {\n        toValue: 1,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.effect.y, {\n        toValue: 0.05,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n    ]).start(() => {\n      if (!this.unmounted) {\n        this.state.effect.setValue({ x: 0, y: 1 });\n        this._animation();\n      }\n    });\n  };\n\n  render() {\n    const { color, size } = this.props;\n    return (\n      <Surface width={size} height={size}>\n        <AnimatedCircle\n          radius={size}\n          fill={color}\n          scale={this.state.effect.x}\n          opacity={this.state.effect.y}\n          x={size / 2}\n          y={size / 2}\n        />\n      </Surface>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}